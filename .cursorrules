# Regras e Aprendizados para WhatsApp AI Agent com Método 4C

## Arquitetura e Estrutura
- Siga o Método 4C: Consumir (receber mensagens) → Capturar (armazenar) → Conectar (analisar) → Criar (responder)
- Use o princípio 80/20: Foque nas funcionalidades principais que entregam mais valor
- Mantenha serviços separados para WhatsApp, banco de dados e IA
- Use TypeScript com interfaces bem definidas para todos os modelos de dados

## Problemas Comuns e Soluções

### Dependências do WhatsApp (Baileys)
```
# Dependências necessárias para Baileys
pnpm add jimp@0.16.1 sharp@0.32.6 link-preview-js qrcode-terminal @hapi/boom
```

### Configuração Next.js com Bibliotecas Node.js
```javascript
// next.config.js
const nextConfig = {
  webpack: (config, { isServer }) => {
    if (!isServer) {
      config.resolve.fallback = {
        fs: false, path: false, os: false, crypto: false,
        stream: false, http: false, https: false, zlib: false,
        net: false, tls: false, child_process: false,
      };
    }
    return config;
  },
  serverExternalPackages: [
    '@whiskeysockets/baileys', 'sharp', 'jimp',
    'qrcode-terminal', 'link-preview-js',
  ],
  experimental: {
    serverActions: true,
  },
};
```

### Formatação de Números WhatsApp
```javascript
// Formatação correta para números de WhatsApp
let formattedNumber = phoneNumber.replace(/\D/g, '');
if (!formattedNumber.includes('@')) {
  formattedNumber = `${formattedNumber}@s.whatsapp.net`;
}
```

### Separação Código Cliente/Servidor
```javascript
// Verificação de ambiente servidor/cliente
const isServer = typeof window === 'undefined';
if (!isServer) {
  console.error('Este código só deve ser executado no servidor');
  return false;
}
```

### APIs Next.js
```javascript
// Configuração para APIs no Next.js
export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';
```

## Docker e MongoDB

### Comando Docker para MongoDB
```bash
# Iniciar MongoDB com Docker
docker run -d --name whatsapp-mongodb -p 27017:27017 mongo:latest
```

### Verificação de Conexão MongoDB
```javascript
// Verificar conexão com MongoDB
const mongoose = await connectToDatabase();
const isConnected = mongoose.connection.readyState === 1;
```

## Padrões de Código

### Tratamento Progressivo de Erros
```javascript
async function sendTextMessage(to, text) {
  if (!isServer) return false;
  if (!this.client || !this.isConnected) return false;
  
  try {
    // formatar número e enviar
    return true;
  } catch (error) {
    console.error('Erro:', error);
    return false;
  }
}
```

### Persistência de Autenticação WhatsApp
```javascript
// Diretório para armazenar credenciais WhatsApp
const AUTH_DIR = isServer ? path.join(process.cwd(), 'auth_data') : '';
if (isServer && !fs.existsSync(AUTH_DIR)) {
  fs.mkdirSync(AUTH_DIR, { recursive: true });
}
```

### Modelo de Mensagem
```javascript
// Modelo de mensagem para MongoDB
interface IMessage extends Document {
  sender: string;
  content: string;
  timestamp: Date;
  chat: string;
  mediaUrl?: string;
  processed: boolean;
  aiAnalysis?: {
    intent?: string;
    sentiment?: string;
    keywords?: string[];
    summary?: string;
  };
  metadata?: Record<string, any>;
}
```

## Requisitos Específicos

### Ambiente Servidor
- Arquivos de autenticação em `auth_data/`
- MongoDB deve estar rodando na porta 27017
- Variável de ambiente ANTHROPIC_API_KEY definida em .env.local

### Formato de Telefone
- Números devem estar no formato internacional com código do país
- Exemplo: 5511999999999 (55=Brasil, 11=DDD, 999999999=número)

### QR Code
- O QR code para conectar o WhatsApp aparece no terminal
- O usuário deve escanear com WhatsApp pelo celular em Dispositivos Conectados

## Extensões e Melhorias Futuras
- Implementar sistema de webhooks para notificações
- Adicionar filas de mensagens para processamento assíncrono
- Implementar retentativas com backoff exponencial para reconexão
- Adicionar suporte para múltiplas contas de WhatsApp
- Criar sistema de templates de respostas personalizáveis 